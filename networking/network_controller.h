//#pragma once
//
//#include "RakPeerInterface.h"
//#include "packet_handler.h"
//#include "packet_builder.h"
//#include "packet_receiver.h"
//#include <string>
//#include <list>
//
//#define DEFAULT_PORT 4440
//
//namespace networking
//{
//	/**
//	* From this class you can control the core networking including setting
//	* up a host, connecting/disconnecting and managing of connected peers.
//	*
//	* @author Simon Kok
//	*/
//	class NetworkController
//	{
//	public:
//		NetworkController();
//		~NetworkController();
//
//		/**
//		* @brief Map a packet handler to a certain packet identifier.
//		* @param[in] is_host Whether this instance will serve as host for the other peers.
//		* @param[in] port If is_host is true this is the port we're hosting on, otherwise this is the port of the host we're connected to.
//		* @param[in] host_address The address of the host we're connected to (if we're not hosting ourself).
//		* @param[in] max_connections The maximum amount of connections this instance allows. If left as default it will be decided based on whether you're hosting or not.
//		*/
//		void Startup(bool is_host, int port = DEFAULT_PORT, std::string host_address = "", int max_connections = -1);
//
//		/**
//		* @brief Checks if there is new incoming data available, and passes any incoming data to the packet receiver.
//		*/
//		void Listen();
//
//		/**
//		* @brief Map a packet handler to a certain packet identifier.
//		* @param[in] packet_id The packet identifier associated with this handler.
//		*/
//		void Shutdown();
//
//		/**
//		* @brief Send a packet to another peer.
//		* @param[in] packet The packetbuilder object containing the packet you want to send.
//		*/
//		void SendPacket(PacketBuilder* packet);
//
//		void SetConnected(bool connected);
//		bool IsConnected(); //!< Whether we're connected to a host or not.
//
//		PacketReceiver& GetPacketReceiver(); //!< @return The class in charge of handling incoming data.
//	private:
//		RakNet::RakPeerInterface* client_; //!< The RakPeer associated with this instance.
//		RakNet::RakNetGUID guid_; //!< The unique identifier generated by RakNet for this instance.
//		bool is_listening_; //!< Whether we're currently listening for incoming data.
//
//		bool is_host_; //!< Whether this instance will serve as host for the other peers.
//		int max_connections_; //!< Whether this instance will serve as host for the other peers.
//
//		std::string host_address_; //!< The host address we're connected to (if we're not the host).
//		int port_; //!< If we're a host this is the port we're hosting on, otherwise this is the port of the host we're connected to.
//		bool is_connected_; //!< Whether we're connected to the host or not.
//
//		RakNet::SystemAddress system_address_; //!< This systems address as a RakNet::SystemAddress
//		//std::list<RakNet::SystemAddress> connected_addresses_;
//
//		RakNet::Packet* packet_; //!< The pointer used for incoming packets before they are handled and deleted.
//		PacketReceiver* packet_receiver_; //!< The class in charge of handling incoming data.
//
//		void Connect(); //!< Attempts to connect to the specified host.
//	};
//}